"use strict";(self.webpackChunkatlas_platform_documentation=self.webpackChunkatlas_platform_documentation||[]).push([[917],{4798:(n,e,t)=>{t.d(e,{A:()=>r});const r=t.p+"assets/images/03-5b7911db68315d4848b0fca04ac39178.jpg"},4963:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"export_integration","title":"Export and Integration","description":"header","source":"@site/docs/export_integration.md","sourceDirName":".","slug":"/export_integration","permalink":"/atlas_platform_documentation/export_integration","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"export_integration","title":"Export and Integration","sidebar":false},"sidebar":"mainSidebar","previous":{"title":"Using User Interface","permalink":"/atlas_platform_documentation/using_user_interface"},"next":{"title":"Known Issues and Limitations","permalink":"/atlas_platform_documentation/known_issues_limitations"}}');var i=t(4848),s=t(8453);const o={id:"export_integration",title:"Export and Integration",sidebar:!1},a=void 0,l={},c=[{value:"\ud83d\ude80 Export and Integration",id:"-export-and-integration",level:2},{value:"\ud83d\udce6 Export Formats",id:"-export-formats",level:3},{value:"\ud83c\udfae Using <code>.glb</code> Files in Unreal Engine",id:"-using-glb-files-in-unreal-engine",level:3}];function d(n){const e={blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"header",src:t(4798).A+"",width:"4000",height:"2000"})}),"\n",(0,i.jsx)(e.h2,{id:"-export-and-integration",children:"\ud83d\ude80 Export and Integration"}),"\n",(0,i.jsxs)(e.p,{children:["Once you're happy with the generated assets in ",(0,i.jsx)(e.strong,{children:"Atlas Platform"}),", you can easily export them for use in your game engine or DCC tools."]}),"\n",(0,i.jsx)(e.h3,{id:"-export-formats",children:"\ud83d\udce6 Export Formats"}),"\n",(0,i.jsxs)(e.p,{children:["Currently, ",(0,i.jsx)(e.strong,{children:"Atlas Platform"})," supports the following export options:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsxs)(e.strong,{children:[(0,i.jsx)(e.code,{children:".blend"})," files"]}),(0,i.jsx)(e.br,{}),"\n","Native Blender files that you can open and edit directly in the Blender DCC."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsxs)(e.strong,{children:[(0,i.jsx)(e.code,{children:".glb"})," files"]}),(0,i.jsx)(e.br,{}),"\n","A universal format compatible with many game engines and 3D applications such as ",(0,i.jsx)(e.strong,{children:"Unreal Engine"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h3,{id:"-using-glb-files-in-unreal-engine",children:["\ud83c\udfae Using ",(0,i.jsx)(e.code,{children:".glb"})," Files in Unreal Engine"]}),"\n",(0,i.jsxs)(e.p,{children:["When importing ",(0,i.jsx)(e.code,{children:".glb"})," assets into ",(0,i.jsx)(e.strong,{children:"Unreal Engine"}),", it's important to pay special attention to ",(0,i.jsx)(e.strong,{children:"normal maps"}),". Unreal Engine uses ",(0,i.jsx)(e.strong,{children:"DirectX normal maps by default"}),", but it also ",(0,i.jsx)(e.strong,{children:"automatically flips the green (Y) channel"})," during import."]}),"\n",(0,i.jsx)(e.p,{children:"Here\u2019s how to handle it correctly:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["If the normal map is named or marked as ",(0,i.jsx)(e.strong,{children:"DirectX"}),",",(0,i.jsx)(e.br,{}),"\n","\ud83d\udc49 ",(0,i.jsx)(e.strong,{children:"Uncheck"})," the ",(0,i.jsx)(e.strong,{children:'"Flip Green Channel"'})," option in the texture settings after import.",(0,i.jsx)(e.br,{}),"\n","This prevents double-flipping and ensures the normals render properly."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["If the normal map is in ",(0,i.jsx)(e.strong,{children:"OpenGL"})," format,",(0,i.jsx)(e.br,{}),"\n","\u2705 You can leave Unreal\u2019s default ",(0,i.jsx)(e.strong,{children:'"Flip Green Channel"'})," setting ",(0,i.jsx)(e.strong,{children:"enabled"}),".",(0,i.jsx)(e.br,{}),"\n","The engine will flip it once, as expected."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"\ud83d\udd27 Tip: Always double-check the normal map preview after import to catch any unexpected shading artifacts."}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);