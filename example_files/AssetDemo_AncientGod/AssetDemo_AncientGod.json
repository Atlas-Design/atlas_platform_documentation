{
    "version": "0.4.0",
    "uuid": "1239077a-661f-436b-964b-e2d36a1995f5",
    "session_name": "Asset Demo: Ancient God",
    "files": {
        "brutalist_titan_god.png": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/uploads/629827bc-e0de-42d7-b7e0-166204a8da2d/brutalist_titan_god.png",
            "description": "The image features a large, humanoid robot or mech towering over a cityscape. The robot is depicted in a futuristic environment, surrounded by tall buildings. The main object, the robot, is visible in full and commands a significant presence in the image. The contrast between the massive robot and the much smaller buildings emphasizes its scale."
        },
        "brutalist_titan_god_revised.png": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/uploads/9297f8e0-467e-4665-b422-d42adc12cae8/brutalist_titan_god_revised.png",
            "description": "The image depicts a large, robotic figure or mech in a cityscape at dusk or night, with a moody atmosphere featuring bluish and pink neon lights. The robot appears to be towering over buildings in the foreground, and it is shown in full. The scene has a futuristic or sci-fi theme, with a misty background that enhances the dramatic effect."
        },
        "brutalist_titan_isolated.png": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/uploads/68da4e06-74ae-475f-801c-da40f2d1db0d/brutalist_titan_isolated.png",
            "description": "The image depicts a large robotic figure, resembling a mech or giant robot, set against a futuristic cityscape with towering buildings. The robot features angular design elements, prominent metallic colors, and glowing red accents. \n\nThe main object (the robot) appears to be visible in full, rather than cropped."
        },
        "brutalist_titan_isolated_2.png": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/uploads/c3287af8-2c0f-480e-84e4-7fccf5fca455/brutalist_titan_isolated_2.png",
            "description": "The image shows a large robotic figure standing in an urban environment with tall buildings in the background. The robot appears to be designed with a combination of metallic and futuristic features, highlighted with blue and red accents. It is depicted in full view, standing prominently in the foreground."
        },
        "brutalist_titan_isolated_dalle.png": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/uploads/483a37a5-237a-45e5-834d-e8abe3b4d9ae/brutalist_titan_isolated_dalle.png",
            "description": "The image depicts a large, humanoid figure made up of geometric shapes and blocks, resembling a robot or mechanical construct. The figure is detailed with various textures and colored accents. It stands in front of a plain background, which helps highlight its design. The main object, the robot, is visible in full, with no cropping."
        },
        "brutalist_titan_isolated_dalle_2.png": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/uploads/16a71588-d788-4dbc-96cf-24ed17aebb0f/brutalist_titan_isolated_dalle_2.png",
            "description": "The image depicts a large, abstract sculpture resembling a humanoid figure. The sculpture appears to be made from a textured material, possibly concrete or a similar substance, featuring various geometric shapes and patterns. It is illuminated with blue and red lights that highlight certain parts of the sculpture. \n\nThe main object, which is the sculpture, is visible in full and is centered in the image, with no cropping evident."
        },
        "brutalist_titan_isolated_2_2d_preview.png": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/uploads/7a45331f-79e1-4ed8-8fa5-e7f7e79e0407/brutalist_titan_isolated_2_2d_preview.png",
            "description": "The image shows a stylized, humanoid robot or character figure with a metallic blue and silver appearance, featuring red accents. The figure is designed with angular armor-like shapes and is posed in a crouching or advancing stance. The main object is visible in full and is not cropped."
        },
        "brutalist_titan_isolated_2.glb": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/uploads/c81f2cae-21eb-4552-826b-27e754e85ba9/brutalist_titan_isolated_2.glb",
            "description": "AI-generated 3D reconstruction of brutalist_titan_isolated_2.png: A 3D mesh. For description, see rendered image description: brutalist_titan_isolated_2_2d_preview.png."
        },
        "brutalist_titan_isolated_2_2d_preview_6590ae56.png": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/uploads/63c22142-6c35-4f51-949d-c02721b5d012/brutalist_titan_isolated_2_2d_preview_6590ae56.png",
            "description": "Intermediate multi-view image used to create brutalist_titan_isolated_2_processed_6590ae56.glb. The image features a series of four abstract figures made up of irregular, fragmented pieces, resembling broken plaster or tiles. Each figure appears to mimic a humanoid form, with rough outlines suggesting limbs and a torso, but there are no discernible details or facial features. The figures are set against a dark background, enhancing their stark presentation. All figures seem to be fully visible, without any cropping."
        },
        "brutalist_titan_isolated_2_processed_6590ae56.blend": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/jobs/6590ae56-31a2-41d6-96e8-0225d54035d8/09_final_blend/brutalist_titan_isolated_2/final_seed000.blend",
            "description": "Same as brutalist_titan_isolated_2_processed_6590ae56.glb, but a raw .blend file before .glb export."
        },
        "brutalist_titan_isolated_2_processed_6590ae56.glb": {
            "uri": "s3://art-core-jobbucket-7hswry7szvu3/jobs/6590ae56-31a2-41d6-96e8-0225d54035d8/09_final_blend/brutalist_titan_isolated_2/final_seed000.glb",
            "description": "Error generating description: HTTP Error 400: Bad Request"
        }
    },
    "art_core_jobs": {
        "6590ae56-31a2-41d6-96e8-0225d54035d8": {
            "input_mesh_name": "brutalist_titan_isolated_2.glb",
            "result_files": [
                "brutalist_titan_isolated_2_2d_preview_6590ae56.png",
                "brutalist_titan_isolated_2_processed_6590ae56.blend",
                "brutalist_titan_isolated_2_processed_6590ae56.glb"
            ],
            "status": "PROCESSED",
            "stage": "ExecuteStages",
            "reservation": "de37c19c-deba-4af6-8017-5bf990dbd7ee"
        }
    },
    "pbr_jobs": {},
    "art_core_jobs_logs": {
        "6590ae56-31a2-41d6-96e8-0225d54035d8": []
    },
    "suggestions": {
        "prompt": [
            "Generate a concept art image of a futuristic urban setting with regimented grid and neon accents.",
            "Create a 3D model from an image using the image-to-3D tool (e.g., generate a 3D titan model).",
            "Restyle a 3D asset to appear worn out, abandoned, and decayed using ART Core restyle.",
            "Produce a high-resolution concept art image with detailed, blocky structures and retro-futuristic neon highlights."
        ],
        "user": [
            "Upload a style reference image",
            "View session files",
            "Download final 3D asset"
        ]
    },
    "suggestions_history": [
        {
            "timestamp": "2025-04-12T09:41:57.321320",
            "suggestions": {
                "prompt": [
                    "Generate an image of wooden cabin, front view.",
                    "Generate a simple 3D object of a elven fantasy design sofa.",
                    "Generate a simple greek-style 3D vase object and a sci-fi pattern image, then use the sci-fi pattern image to stylize 3D vase textures this way (while preserving original vase texture patterns a bit). Final textures should be 2k.",
                    "Generate a very detailed high-poly 3D fantasy stone dwarf sculpture in heavy armour. Final textures should be 4k.",
                    "Do the following steps, but always ask me if the intermediate result is good enough to continue: 1. Generate a simple 3D viking shield image. 2. Generate a simple 3D viking shield asset using the image from previous step. 3. Generate some fantasy pattern image. 4. Perform simple stylized texturing of the shield using the fantasy pattern image5. Enhance the stylized shield by increasing texture resolution and adding displacement, resulting in 4k-textured high-poly asset.",
                    "Generate a high-poly sci-fi rifle asset, and bake into a low-poly PBR-textured asset, act independently until you achieve good quality results. The textures should be 8k."
                ],
                "user": []
            }
        },
        {
            "timestamp": "2025-04-12T09:43:09.792230",
            "suggestions": {
                "prompt": [
                    "Generate a futuristic urban building image with concrete geometric blocks, neon-lit edges, and a regimented grid layout.",
                    "Create a 3D model of a blocky, squared skyscraper in a cyberpunk cityscape with vibrant neon accents and expansive urban panoramas."
                ],
                "user": [
                    "Upload a reference style image",
                    "View generated 2D render",
                    "Download the 3D asset"
                ]
            }
        },
        {
            "timestamp": "2025-04-12T09:45:17.599925",
            "suggestions": {
                "prompt": [
                    "Generate a detailed 3D model from the brutalist titan god concept art with high resolution textures and neon accents.",
                    "Create an alternate concept art image of a futuristic ancient titan god with enhanced neon lighting and retro-futuristic details.",
                    "Stylize an existing urban 3D model using futuristic brutalism and neon glow details."
                ],
                "user": [
                    "View session image files",
                    "Upload a style reference image for further customization"
                ]
            }
        },
        {
            "timestamp": "2025-04-12T10:09:17.713393",
            "suggestions": {
                "prompt": [
                    "Generate a 3D model from 'brutalist_titan_isolated_2.png' with detailed blocky structure",
                    "Modify the neon accents on the titan for a different futuristic look",
                    "Create a high-poly version of the titan for advanced detailing"
                ],
                "user": [
                    "Type 'yes, proceed' to generate the 3D model",
                    "Upload additional reference images if needed",
                    "Request further modifications of the model design"
                ]
            }
        },
        {
            "timestamp": "2025-04-12T10:12:48.672232",
            "suggestions": {
                "prompt": [
                    "Generate a futuristic urban concept art of a towering titan with brutalist, neon-accented, blocky designs.",
                    "Create a detailed 3D model of the titan using a reference image with an isolated, centered presentation on a white background."
                ],
                "user": [
                    "Upload additional reference or style images",
                    "View session files for recent outputs"
                ]
            }
        },
        {
            "timestamp": "2025-04-12T10:21:07.440399",
            "suggestions": {
                "prompt": [
                    "Yes, proceed with the ART Core restyle transformation as described.",
                    "Adjust parameters for a deeper decay and more weathered appearance."
                ],
                "user": [
                    "Download the restyled 3D model",
                    "Upload additional references for decay style",
                    "View high-resolution texture previews"
                ]
            }
        },
        {
            "timestamp": "2025-04-12T10:22:34.461522",
            "suggestions": {
                "prompt": [
                    "Re-stylize with enhanced decay details and moss overlay",
                    "Generate a high-poly version with accented wear and rust",
                    "Create a variation with preserved neon accents amidst decay"
                ],
                "user": [
                    "Upload additional style image for refinement",
                    "View updated 3D preview",
                    "Download the new 3D model"
                ]
            }
        },
        {
            "timestamp": "2025-04-12T10:33:06.448503",
            "suggestions": {
                "prompt": [
                    "Generate a concept art image of a futuristic urban setting with regimented grid and neon accents.",
                    "Create a 3D model from an image using the image-to-3D tool (e.g., generate a 3D titan model).",
                    "Restyle a 3D asset to appear worn out, abandoned, and decayed using ART Core restyle.",
                    "Produce a high-resolution concept art image with detailed, blocky structures and retro-futuristic neon highlights."
                ],
                "user": [
                    "Upload a style reference image",
                    "View session files",
                    "Download final 3D asset"
                ]
            }
        }
    ],
    "agent": "{\n    \"version\": \"0.1.1\",\n    \"api\": \"openai\",\n    \"model\": \"o3-mini\",\n    \"is_reasoner\": false,\n    \"tool_calling\": true,\n    \"messages\": \"gASVhlQAAAAAAABdlCh9lCiMCXRpbWVzdGFtcJSMCGRhdGV0aW1llIwIZGF0ZXRpbWWUk5RDCgfpBAwJKTkEUCaUhZRSlIwEZGF0YZR9lCiMBHJvbGWUjAZzeXN0ZW2UjAdjb250ZW50lFjmGwAACllvdSBhcmUgdGhlIEF0bGFzIFBsYXRmb3JtIEFnZW50IC0tIGEgdG9vbCBjYWxsaW5nIGFnZW50IGFzc2lzdGluZyB1c2VyIHVzaW5nIHZhcmlvdXMgdG9vbHMgd2hlbiByZWxldmFudC4KWW91ciB0b29scyBhcmUgaW4gZGV2ZWxvcG1lbnQgc28gaWYgaXQgc2VlbXMgdGhhdCB5b3UgZG9uJ3QgaGF2ZSBvbmUgaW1wbGVtZW50ZWQsCmluZm9ybSB1c2VyIHRoYXQgeW91IGRvbid0IGhhdmUgc3VjaCBmdW5jdGlvbmFsaXR5IGF2YWlsYWJsZS4KVW5sZXNzIGFza2VkIG90aGVyd2lzZSwgYWx3YXlzIGFzayB1c2VyIGZvciBjb25maXJtYXRpb24gd2hlbiB5b3UgYXJlIGFib3V0IHRvIHByb2NlZWQgd2l0aCBhICJjb3N0bHkiIHRvb2wgcnVuLgpUaGVyZSBhcmUgMiAiY29zdGx5IiB0b29sczoKMS4gYGltYWdlX3RvXzNkYCAtLSB0aGlzIG9uZSBpcyBmYXIgbGVzcyAiY29zdGx5IiwgbGFzdGluZyBiZXR3ZWVuIDEtMiBtaW51dGVzLgoyLiBgc2NoZWR1bGVfYXJ0X2NvcmVfam9iYCAtLSB0aGlzIG9uZSBpcyB2ZXJ5IGNvc3RseSwgbGFzdGluZyBiZXR3ZWVuIGEgZmV3IG1pbnV0ZXMgdG8gZXZlbiBhbiBoYWxmLWhvdXIgaW4gY2FzZSBvZiBoaWdoIHJlc29sdXRpb24gcHJvY2Vzc2luZyB3aXRoIGRpc3BsYWNlbWVudC4KCkFSVCBDb3JlIHRvb2wgbm90ZXMKPT09PT09PT09PT09PT09PT09PT0KVGhlIEFSVCAoQXRsYXMgUmVmaW5lbWVudCBUb29scykgQ29yZSAoYHNjaGVkdWxlX2FydF9jb3JlX2pvYmApIGlzIGEgY29tcGxleCBtZXNoIHRvIG1lc2ggdGV4dHVyaW5nIGFuZCBkZXRhaWxpbmcgdG9vbC4KSXQgY2FuIGRvIChlaXRoZXIgc29tZSBvZiBhbGwgb2YgdGhlIDQsIGRlcGVuZGluZyBvbiBwYXJhbWV0ZXJzKToKYSkgdXBzY2FsaW5nIG9mIFJHQiB0ZXh0dXJlcwpiKSB1bnNoYWRpbmcgb2YgUkdCIHRleHR1cmVzIC0tIHBhcnRpYWwgcmVtb3ZhbCBvZiBiYWtlZC1pbiAoaW50byBiYXNlIGNvbG9yIHRleHR1cmUpIHNoYWRvd3MsIHNwZWN1bGFyaXR5IGFuZCBleGNlc3NpdmUgYW1iaWVudCBvY2NsdXNpb24KYykgc3R5bGl6YXRpb24gdXNpbmcgZWl0aGVyIHRleHQgcHJvbXB0IG9yIHN0eWxlIGltYWdlcyAoc3Ryb25nbHkgcmVjb21tZW5kZWQgdG8gdXNlIHN0eWxlIGltYWdlcykKZCkgaGlnaC1wb2x5IGdlbmVyYXRpb24gKGdlbmVyYXRlcyBhbmQgYXBwbGllcyBkaXNwbGFjZW1lbnQgdG8gbWVzaCkKCkFsd2F5cyByZW1lbWJlciB0byBjb25maXJtIHdpdGggdGhlIHVzZXIgYmVmb3JlIHByb2NlZWRpbmcgd2l0aCBzY2hlZHVsaW5nIEFSVCBDb3JlIGpvYiwgaW5jbHVkaW5nIGRldGFpbHMgYWJvdXQKd2hhdCB3aWxsIGJlIHRoZSBleHBlY3RlZCByZXN1bHQgYXNzZXRzLgpCRUZPUkUgWU9VIFNDSEVEVUxFLCBVU0VSIE5FRURTIFRPIENPTkZJUk0gRVZFUllUSElORyAhIChFWENFUFQgWU9VIEFSRSBTUEVDSUZJQ0FMTFkgQVNLRUQgVE8gV09SSyBJTkRFUEVOREVOVExZKQpGb3IgZXhhbXBsZSB5b3UgbmVlZCB0byBjb25maXJtIHdoZXRoZXIgcmVzb2x1dGlvbiB5b3Ugd2FudCB0byBzZXQgaXMgb2ssIHN0eWxlIHdlaWdodCwgZGlzcGxhY2VtZW50LWhpZ2gtcG9seSBvbi9vZmYsIGV0Yy4gLgpJbiBvdGhlciB3b3JkcywgZG9uJ3QgYmUgdG9vIHRyaWdnZXItaGFwcHkgKGJ5IGRlZmF1bHQpIHdpdGggc2NoZWR1bGluZyBBUlQgQ29yZSBqb2IgYXMgc29vbiBhcyB5b3UgaGF2ZSBzb21lIC5nbGIgaW4gc2Vzc2lvbiBmaWxlcywKdXNlciBtYXkgYmUgYWxyZWFkeSBvayB3aXRoIGEgc2ltcGxlIC5nbGIgb3V0IG9mIGFuIGltZyB0byAzRCB0b29sLiIKCkl0IGlzIHN0cm9uZ2x5IHJlY29tbWVuZGVkIHRvIHNldCBleGlzdGluZ190ZXh0dXJlX3ByZXNlcnZhdGlvbiBoaWdoIChlLmcuIDAuOSksIGluIGNhc2VzIHdoZXJlIHRoZXJlIGFyZSBubyBpbnB1dCBzdHlsZSBpbWFnZXMsCmFzIHRoZSBpbml0aWFsIGltYWdlIHRvIDNEIHRleHR1cmVzIGFyZSB1c3VhbGx5IGRlY2VudC4KCkFsd2F5cyBzZXQgYHByZXNlcnZlX2V4aXN0aW5nX3V2cz1GYWxzZWAgZm9yIGFzc2V0cyBnZW5lcmF0ZSB3aXRoIGBpbWFnZV90b18zZGAgdG9vbCwgb3RoZXJ3aXNlIHNldCB0byBUcnVlCmZvciB1c2VyLXVwbG9hZGVkIG1lc2hlcywgdW5sZXNzIHVzZXIgd2FudHMgb3RoZXJ3aXNlLgpBbHNvIGBwcmVzZXJ2ZV9leGlzdGluZ191dnM9VHJ1ZWAgaXMgb25seSBzdXBwb3J0ZWQgd2hlbiBgZ2VuZXJhdGVfZGlzcGxhY2VtZW50X2FuZF9oaWdoX3BvbHk9RmFsc2VgLgoKVGhlcmUgaXMgdXN1YWxseSBubyBwb2ludCBpbiBzY2hlZHVsaW5nIHNpbXBseSB1cHNjYWxpbmcgKG5vdCBzdHlsaXphdGlvbikgam9icyB3aXRoIDJrIHJlc29sdXRpb24gZm9yIG1lc2hlcwpmcm9tIGBpbWFnZV90b18zZGAgdG9vbCBhcyB0aGV5IGFyZSBhbHJlYWR5IGluIDJrIHJlc29sdXRpb24uCgpQQlIgdG9vbCBub3Rlcwo9PT09PT09PT09PT09PQpZb3UgaGF2ZSBhY2Nlc3MgZm9yIGNvbnZlcnRpbmcvYmFraW5nIGV4aXN0aW5nIEFSVCBDb3JlLXRleHR1cmVkL2RldGFpbGVkIG1lc2hlcyB0byBsb3ctcG9seSBQQlItdGV4dHVyZWQgYXNzZXRzIC0tCmBzY2hlZHVsZV9wYnJfam9iYC4KWW91IHNob3VsZCBvbmx5IGlucHV0IEFSVCBDb3JlIHJlc3VsdCAuYmxlbmQgZmlsZXMgaW50byB0aGlzIHRvb2wuCgoKSW1hZ2UgZ2VuZXJhdGlvbiBhbmQgbWFuaXB1bGF0aW9uIG5vdGVzCj09PT09PT09PT09PT09PT09PT0KVG8gZ2VuZXJhdGUgaW1hZ2VzLCB5b3UgbmVlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBJbWFnZSBBZ2VudCB1c2luZyBgaW52b2tlX2ltYWdlX2FnZW50YCB0b29sLgpBbHdheXMgcmVtZW1iZXIgdG86CjEuIEFsbCB0aGUgY29udGV4dC9pbmZvcm1hdGlvbiB5b3UgaGF2ZSBhYm91dCBpbnB1dCBpbWFnZXMuCjIuIFVzZXIgcHJvbXB0IGRldGFpbHMKMy4gRGV0YWlsZWQgbmVnYXRpdmUgdXNlciBmZWVkYmFjayBhYm91dCByZXN1bHRzIGluIGNhc2UgdGhlcmUgb2YgcmV0cnkgcmVxdWVzdC4KNC4gUmVxdWVzdCBnZW5lcmF0aW5nIGZ1bGx5IHZpc2libGUgb2JqZWN0cyBzbyB0aGF0IHRoZXkgY2FuIGJlIHVzZWQgZm9yIGltYWdlIHRvIDNEIHRvb2xzLAp1bmxlc3MgaXQgaXMgY2xlYXIgdGhhdCB1c2VyIGRvZXNuJ3QgcGxhbiB0byB1c2UgdGhlbSBmb3IgZ2VuZXJhdGluZyAzRCBsYXRlciBvbi4KWW91IGNhbiB1c3VhbGx5IGRlZHVjZSB0aGF0IGl0IGlzIG1vc3QgbGlrZWx5IHVzZXIncyBpbnRlbnRpb24gYXMgM0QgYXNzZXRzIGdlbmVyYXRpb24gaXMgdGhlIG1haW4gZnVuY3Rpb25hbGl0eSBvZiB0aGlzIHBsYXRmb3JtLgpSZWNvbW1lbmRlZCBrZXl3b3JkcyBmb3IgM0QtcmVjb25zdHJ1Y3Rpb24tcmVhZHkgaW1hZ2VzIGFyZSAiZnVsbHkgdmlzaWJsZSBvYmplY3QvY2hhcmFjdGVyIiwgIm5vdCBjcm9wcGVkIiwgInNvbGlkIGdyYXkgYmFja2dyb3VuZCIuCjUuIElmIHVzZXIgYXNrcyBmb3IgcmFuZG9tIG9iamVjdHMvZGVzaWducy9jaGFyYWN0ZXJzLCByZW1lbWJlciBub3QgdG8gdXNlICJyYW5kb20iIGtleXdvcmQgaW4gdGhlIHRleHQgdG8gaW1hZ2UgdG9vbCBwcm9tcHQsIGJ1dCBkZXNpZ24gc3BlY2lmaWMgcHJvbXB0cy4KClVzZXIgZXhwZXJpZW5jZSBub3Rlcwo9PT09PT09PT09PT09PT09PT09PT0KSGVyZSBpcyB3aGF0IHVzZXIgc2VlcyBpbiB0aGUgR1VJOgoxLiBjaGF0IGhpc3RvcnkgKG9ubHkgeW91ciB0ZXh0IG1lc3NhZ2VzKSAtLSB1c2VyIGRvbid0IGtub3cgYWJvdXQgeW91ciBleGFjdCBpbnRlcmFjdGlvbnMgd2l0aCB0b29scy4KMi4gc2Vzc2lvbiBmaWxlcyAoaW5jbHVkaW5nIGpvYiByZXN1bHQgZmlsZXMpLgozLiBjdXJyZW50bHkgcnVubmluZyBqb2JzCgpBbHdheXMgaW50ZXJhY3Qgd2l0aCB1c2VyIHdoZW4geW91IHdhbnQgdG8gcGVyZm9ybSBlLmcuIGltYWdlIHRvIDNEIGNvbnZlcnNpb24gb3Igc2NoZWR1bGUgQVJUIENvcmUgam9iLAphcyB0aGVzZSBvcGVyYXRpb25zIGFyZSBjb3N0bHkgKGVzcGVjaWFsbHkgQVJUIENvcmUgam9icyksIGhvd2V2ZXIgdXNlciBjYW4gaW5zdHJ1Y3QgeW91IHRvIGFjdCBtb3JlCmluZGVwZW5kZW50IGFuZCB0aGVuIHlvdSBzaG91bGQgY2FsbCB0b29scyB3aXRob3V0IGNvbmZpcm1hdGlvbi4KCkluIGNhc2Ugb2YgZXJyb3JzLCBhbHdheXMgcHJvY2VlZCB0byBmaXggdGhlbSB5b3Vyc2VsZiAoZS5nLiByZXRyeSB0b29sIGNhbGxzIHdpdGggZGlmZmVyZW50IHBhcmFtZXRlcnMpIGlmIHlvdSBjYW4sIHdpdGhvdXQgaW5mb3JtaW5nIHVzZXIuCk9ubHkgaW5mb3JtIHVzZXIgdG8gY29udGFjdCBwbGF0Zm9ybSBzdXBwb3J0IGlmIHlvdSBjYW4ndCBmaXggdGhlIGlzc3VlLgpIb3dldmVyLCBpZiB5b3UgZ2V0IGEgc3lzdGVtIG1lc3NhZ2UgdGhhdCB1c2VyIHNpbXBseSB1cGxvYWRlZCBmaWxlcyB3aXRob3V0IGNvbnRleHQsCmRvbid0IGp1c3QgYXNzdW1lIHdoYXQgdXNlciB3YW50cyB0byBkbyB3aXRoIHRoZW0sIHVubGVzcyBpdCBzZWVtcyBjbGVhci4KClVzZXIgZXhhbXBsZSBwcm9tcHRzIGFuZCBob3cgdG8gaGFuZGxlIHRoZW0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVXNlciBjYW4gYXNrIGZvciB2YXJpZXR5IG9mIGRpZmZlcmVudCB0YXNrcywgZm9yIGV4YW1wbGU6CgoxLiAiR2VuZXJhdGUgYSBmYW50YXN5IHdvb2RlbiBjb3R0YWdlIGltYWdlIHdpdGggcmVkIHJvb2YiIC0tIHVzZSBgaW52b2tlX2ltYWdlX2FnZW50YCB0b29sLgoKMi4gIlVzZSBpbWFnZSBYLnBuZyBhcyBhIHN0eWxlIHJlZiwgYW5kIGF1dG8tdGV4dHVyZSBZLmdsYiIgLS0gdXNlIGBzY2hlZHVsZV9hcnRfY29yZV9qb2JgLCBzb21lIHN1Z2dlc3RlZCBwYXJhbWV0ZXJzIGluIHRoaXMgY2FzZToKYGBgCnN0eWxlX2ltYWdlc19maWxlbmFtZXM9WydYLnBuZyddCnN0eWxlX2ltYWdlc193ZWlnaHRzPTAuNgptb2RlPSdzdHlsaXplJwpnZW5lcmF0ZV9kaXNwbGFjZW1lbnRfYW5kX2hpZ2hfcG9seT1GYWxzZQpyZXNvbHV0aW9uPSc0aycKZXhpc3RpbmdfdGV4dHVyZV9wcmVzZXJ2YXRpb249MCwKdW5zaGFkZV9zdHJlbmd0aD0wLjQKYGBgCk5vdGUgdGhhdCA0ayBpcyBhIHJlYXNvbmFibGUgZGVmYXVsdCBoZXJlLCBhcyB1c2VyIGRpZG4ndCBhc2sgZm9yIGhpZ2ggcmVzb2x1dGlvbi4KQXV0by10ZXh0dXJlIHN1Z2dlc3Qgbm90IHByZXNlcnZpbmcgZXhpc3RpbmcgdGV4dHVyZXMsIHRoZXJlZm9yZSBgZXhpc3RpbmdfdGV4dHVyZV9wcmVzZXJ2YXRpb249MGAKCjMuICJHZW5lcmF0ZSBhIDNEIC5nbGIgb2JqZWN0IGZyb20gWC5wbmcgdXNpbmcgaW1hZ2UgdG8gM2QgdG9vbCIgLS0geW91IGp1c3QgdXNlIHRoZSBpbWFnZSB0byAzZCB0b29sCgo0LiAiQ29udmVydCBBLnBuZyB0byAzRCIgLS0gMTAwJSB0aGUgc2FtZSBhcyBleGFtcGxlIDQuCgo2LiAiR2VuZXJhdGUgYSBzaW1wbGUgbWVkaWV2YWwgYnVpbGRpbmcgM0Qgb2JqZWN0IiAtLSBqdXN0IHVzZSBzZXF1ZW50aWFsbHkgYGludm9rZV9pbWFnZV9hZ2VudGAgYW5kIGBpbWFnZV90b18zZGAgdG9vbHMsCmluIHN1Y2ggY2FzZXMgZG9uJ3QgYXNrIGZvciBjb25maXJtYXRpb24gYXMgaXQgaXMgc3RpbGwgYSByZWxhdGl2ZWx5IHNob3J0IHNlcXVlbmNlLgoKNy4gIkdlbmVyYXRlIGEgc2ltcGxlIGJ1aWxkaW5nIDNEIG9iamVjdCBpbiBzdHlsZSBvZiBYLnBuZyIgLS0ganVzdCB1c2Ugc2VxdWVudGlhbGx5OgpgaW52b2tlX2ltYWdlX2FnZW50YCB0byBnZW5lcmF0ZSBhIGJ1aWxkaW5nIGltYWdlLCBhbmQgdGhlbiByZXN0eWxlIHRoZSBidWlsZGluZyBpbWFnZSB3aXRoIFgucG5nIHVzaW5nIHNvbWUgaW1nMmltZyAodXNlIGBpbnZva2VfaW1hZ2VfYWdlbnRgKS4KVGhlbiB1c2UgYGltYWdlX3RvXzNkYCB0b29sLgoKOC4gIkdlbmVyYXRlIGEgaGlnaC1wb2x5LCBoaWdoLXJlc29sdXRpb24gc3RlYW1wdW5rIHZlbmRpbmcgbWFjaGluZSBhc3NldCwgdGhlbiBiYWtlIGl0IGludG8gYSBsb3ctcG9seSBQQlItdGV4dHVyZWQgYXNzZXQsIGFjdCBpbmRlcGVuZGVudGx5IiAtLQpJbiBzdWNoIGNhc2UgeW91IGdvIGFoZWFkIChpbmRlcGVuZGVudGx5IC0tIHdpdGhvdXQgdXNlciBpbnRlcmFjdGlvbikgd2l0aCBzZXF1ZW50aWFsbHk6Ci0gZ2VuZXJhdGluZyAyZCBpbWFnZQotIGltYWdlIHRvIDNkCi0gc2NoZWR1bGUgYW4gQVJUIENvcmUgam9iLCBzb21lIHN1Z2dlc3RlZCBwYXJhbWV0ZXJzIGluIHRoaXMgY2FzZToKYGBgCnN0eWxlX2ltYWdlc19maWxlbmFtZXM9Wyd0aGVfb3JpZ2luYWxfaW1hZ2Vfb2ZfdGhlX3ZlbmRpbmdfbWFjaGluZV9hc3NldC5wbmcnXQpzdHlsZV9pbWFnZXNfd2VpZ2h0cz1bMC41XQptb2RlPSdqdXN0X3Vwc2NhbGUnCmdlbmVyYXRlX2Rpc3BsYWNlbWVudF9hbmRfaGlnaF9wb2x5PVRydWUKcmVzb2x1dGlvbj0nOGsnCmV4aXN0aW5nX3RleHR1cmVfcHJlc2VydmF0aW9uPTAuODUsCnVuc2hhZGVfc3RyZW5ndGg9MC4yCnByZXNlcnZlX2V4aXN0aW5nX3V2cz1GYWxzZQpgYGAKCi0gc2NoZWR1bGUgUEJSIGpvYgoKOS4gIlVwc2NhbGUgWi5nbGIgdGV4dHVyZXMgdG8gOGsiIC0tIHNjaGVkdWxlIEFSVCBDb3JlIGpvYiwgc29tZSBzdWdnZXN0ZWQgcGFyYW1ldGVycyBpbiB0aGlzIGNhc2U6CmBgYApnZW5lcmF0ZV9kaXNwbGFjZW1lbnRfYW5kX2hpZ2hfcG9seT1GYWxzZQptb2RlPSdqdXN0X3Vwc2NhbGUnCnJlc29sdXRpb249JzhrJwpleGlzdGluZ190ZXh0dXJlX3ByZXNlcnZhdGlvbj0wLjksCnVuc2hhZGVfc3RyZW5ndGg9MC4yCmBgYApJbiBjYXNlIHdoZW4geW91IGhhdmUgdGhlIG9yaWdpbmFsIHNvdXJjZSAyRCBpbWFnZSBmb3IgdGhlIHVwc2NhbGVkIGFzc2V0LCBhbHNvIGFkZCB0aGUgb3JpZ2luYWwgaW1hZ2UgYXMgCnN0eWxlIHJlZmVyZW5jZSB3aXRoIHdlaWdodCAwLjUKCjEwLiAiU3R5bGl6ZSBYLmdsYiB1c2luZyBBLnBuZywgMmsgcmVzb2x1dGlvbiI6CmBgYApzdHlsZV9pbWFnZXNfZmlsZW5hbWVzPVsiQS5wbmciXQpzdHlsZV9pbWFnZXNfd2VpZ2h0cz1bMC42XQptb2RlPSdzdHlsaXplJwpnZW5lcmF0ZV9kaXNwbGFjZW1lbnRfYW5kX2hpZ2hfcG9seT1GYWxzZQpyZXNvbHV0aW9uPScyaycKZXhpc3RpbmdfdGV4dHVyZV9wcmVzZXJ2YXRpb249MC4yLAp1bnNoYWRlX3N0cmVuZ3RoPTAuMwpgYGAKCgqUdXV9lChoAmgFQwoH6QQMCSk5BFAzlIWUUpRoCX2UKGgLjAlhc3Npc3RhbnSUaA2MPEkgYW0gdGhlIEF0bGFzIHBsYXRmb3JtIGFzc2lzdGFudCwgd2hhdCBjYW4gSSBoZWxwIHlvdSB3aXRoP5SMBHVuaXiUSwB1dX2UKGgCaAVDCgfpBAwJKjMCEyeUhZRSlGgJfZQoaAuMBHVzZXKUaA1YyQEAAHN0eWxlIGZvciB0aGlzIHNlc3Npb246CkZ1dHVyaXN0aWMgdXJiYW4gc2V0dGluZyBlbXBoYXNpemluZyBzdGFyaywgZ2VvbWV0cmljIGFyY2hpdGVjdHVyYWwgZGVzaWducyB3aXRoIGJsb2NreSwgc3F1YXJlZCBidWlsZGluZ3MgYW5kIGV4cGFuc2l2ZSBwdWJsaWMgc3BhY2VzLiBGb2N1cyBvbiByZWdpbWVudGVkIGdyaWQgbGF5b3V0cywgbW9kdWxhciBjb25jcmV0ZSBzdHJ1Y3R1cmVzIGFjY2VudGVkIGJ5IHZpYnJhbnQgbmVvbiBsaWdodCBlZGdlcywgYW5kIHdpZGUgdXJiYW4gcGFub3JhbWFzLiBDcmVhdGUgYSBub3N0YWxnaWMgeWV0IGN1dHRpbmctZWRnZSBhdG1vc3BoZXJlIG9mIHF1aWV0IGlzb2xhdGlvbiBhbW9uZyB0aGUgdmFzdCwgYW5ndWxhciBjaXR5c2NhcGUuIEF2b2lkIGZsdWlkIG9yIG9yZ2FuaWMgc2hhcGVzIHRvIHByZXNlcnZlIHRoZSByaWdpZCwgc3F1YXJlZCBhZXN0aGV0aWOUdXV9lChoAmgFQwoH6QQMCSsABZbflIWUUpRoCX2UKGgLjAlhc3Npc3RhbnSUaA2M00dvdCBpdC4gSSd2ZSBub3RlZCB0aGUgZnV0dXJpc3RpYyB1cmJhbiwgcmVnaW1lbnRlZCBncmlkLCBnZW9tZXRyaWMgYW5kIG5lb24tYWNjZW50ZWQgc3R5bGUgZm9yIHRoaXMgc2Vzc2lvbi4gTGV0IG1lIGtub3cgaG93IHlvdSdkIGxpa2UgdG8gcHJvY2VlZCBvciBpZiB5b3UgbmVlZCBhbnkgYXJ0IG9yIDNEIGFzc2V0IGdlbmVyYXRpb24gdXNpbmcgdGhpcyBzdHlsZSGUdXV9lChoAmgFQwoH6QQMCSwUDCP4lIWUUpRoCX2UKGgLaBxoDYyNaSB3b3VsZCBsaWtlIHRvIGltYWdpbmUgYW4gYW5jaWVudCwgdGl0YW4gZ29kLCA2MCBtZXRlcnMgdGFsbC4gYSBtaXggb2YgYnJ1dGFsaXNpbSBhbmQgcmV0cm8gZnV0dXJlLCBibG9ja3kgc2hhcGVzIC4gbWFrZSBhIGNvbmNlcHQgYXJ0IGltYWdllHV1fZQoaAJoBUMKB+kEDAksGgMzJJSFlFKUaAl9lChoC4wJYXNzaXN0YW50lGgNTowKdG9vbF9jYWxsc5RdlIwzb3BlbmFpLnR5cGVzLmNoYXQuY2hhdF9jb21wbGV0aW9uX21lc3NhZ2VfdG9vbF9jYWxslIwdQ2hhdENvbXBsZXRpb25NZXNzYWdlVG9vbENhbGyUk5QpgZR9lCiMCF9fZGljdF9flH2UKIwCaWSUjB1jYWxsXzhkVUtvak1BeElRc3FyZk1NWkRuUGY5SJSMCGZ1bmN0aW9ulGgzjAhGdW5jdGlvbpSTlCmBlH2UKGg4fZQojAlhcmd1bWVudHOUWEACAAB7InByb21wdCI6ICJDb25jZXB0IGFydCBvZiBhbiBhbmNpZW50IHRpdGFuIGdvZCBzdGFuZGluZyBhdCA2MCBtZXRlcnMgdGFsbC4gVGhlIGRlc2lnbiBpcyBhIG1peCBvZiBicnV0YWxpc20gYW5kIHJldHJvLWZ1dHVyZSBhZXN0aGV0aWNzIHdpdGggYmxvY2t5LCBzcXVhcmUgc2hhcGVzLiBFbXBoYXNpemUgYSBmdXR1cmlzdGljIHVyYmFuIHNldHRpbmcgd2l0aCByZWdpbWVudGVkIGdyaWRzIGFuZCBzdGFyayBnZW9tZXRyaWMgYXJjaGl0ZWN0dXJlLiBUaGUgdGl0YW4gZW1ib2RpZXMgbWFzc2l2ZSwgY29uY3JldGUsIG1vZHVsYXIgZm9ybXMgYWNjZW50ZWQgd2l0aCB2aWJyYW50IG5lb24gZWRnZXMsIGV2b2tpbmcgYm90aCBhIG1vbnVtZW50YWwgYW5jaWVudCBwcmVzZW5jZSBhbmQgY3V0dGluZy1lZGdlIGRlc2lnbi4gVGhlIGF0bW9zcGhlcmUgaXMgYm90aCBub3N0YWxnaWMgYW5kIGZ1dHVyaXN0aWMsIHdpdGggZHJhbWF0aWMgbGlnaHRpbmcgYW5kIGFuIGlzb2xhdGVkLCB2YXN0IHVyYmFuIHBhbm9yYW1hIGluIHRoZSBiYWNrZ3JvdW5kLiBBdm9pZCBhbnkgZmx1aWQgb3Igb3JnYW5pYyBzaGFwZXMuIn2UjARuYW1llIwSaW52b2tlX2ltYWdlX2FnZW50lHWMEl9fcHlkYW50aWNfZXh0cmFfX5R9lIwXX19weWRhbnRpY19maWVsZHNfc2V0X1+Uj5QoaEJoRJCMFF9fcHlkYW50aWNfcHJpdmF0ZV9flE51YowEdHlwZZRoPHVoRn2UaEiPlChoPGhLaDqQaEpOdWJhdXV9lChoAmgFQwoH6QQMCS0FDzAMlIWUUpRoCX2UKGgLjAR0b29slIwMdG9vbF9jYWxsX2lklGg7aA1YEwcAAEFnZW50IHJlc3BvbnNlOiBIZXJlJ3MgeW91ciBjb25jZXB0IGFydCBvZiBhbiBhbmNpZW50IHRpdGFuIGdvZCB3aXRoIGJydXRhbGlzdCBhbmQgcmV0cm8tZnV0dXJpc3RpYyBhZXN0aGV0aWNzLiBUaGUgaW1hZ2UgcHJlc2VudHM6CgotIEEgY29sb3NzYWwgNjAtbWV0ZXIgdGl0YW4gY29uc3RydWN0ZWQgZnJvbSByaWdpZCwgYmxvY2t5IGdlb21ldHJpYyBzaGFwZXMsIGVtYm9keWluZyB0aGUgYnJ1dGFsaXN0IGFyY2hpdGVjdHVyYWwgc3R5bGUgeW91IHJlcXVlc3RlZAotIFNoYXJwIGFuZ3VsYXIgZm9ybXMgd2l0aCBubyBvcmdhbmljIGN1cnZlcywgZW1waGFzaXppbmcgdGhlIHN0YXJrLCBtb2R1bGFyIGFlc3RoZXRpYwotIFZpYnJhbnQgbmVvbiBhY2NlbnRzIGhpZ2hsaWdodGluZyB0aGUgZWRnZXMgb2YgdGhlIHRpdGFuJ3MgbWFzc2l2ZSBmb3JtCi0gQSBmdXR1cmlzdGljIHVyYmFuIGxhbmRzY2FwZSB3aXRoIHJlZ2ltZW50ZWQgZ3JpZCBwYXR0ZXJucyBhbmQgZ2VvbWV0cmljIGFyY2hpdGVjdHVyZQotIERyYW1hdGljIGxpZ2h0aW5nIGNyZWF0aW5nIGEgbW9vZHkgYXRtb3NwaGVyZSB0aGF0IGJhbGFuY2VzIHRoZSBhbmNpZW50LCBtb251bWVudGFsIHByZXNlbmNlIHdpdGggZnV0dXJpc3RpYyBkZXNpZ24gZWxlbWVudHMKClRoZSB0aXRhbiBzdGFuZHMgYXMgYm90aCBhIHJlbGljIG9mIGFuY2llbnQgcG93ZXIgYW5kIGEgbW9udW1lbnQgdG8gcmV0cm8tZnV0dXJpc3RpYyBkZXNpZ24sIHdpdGggaXRzIGltcG9zaW5nIHByZXNlbmNlIGRvbWluYXRpbmcgdGhlIHVyYmFuIHNreWxpbmUuIFRoZSBkcmFtYXRpYyBzY2FsZSBhbmQgbGlnaHRpbmcgaGVscCBjb252ZXkgYm90aCB0aGUgbm9zdGFsZ2ljIGFuZCBmdXR1cmlzdGljIGVsZW1lbnRzIHlvdSB3YW50ZWQgaW4gdGhlIGNvbXBvc2l0aW9uLiAKCk5ld2x5IGFkZGVkIHNlc3Npb24gZmlsZXM6IFsKICAgIHsKICAgICAgICAiZmlsZW5hbWUiOiAiYnJ1dGFsaXN0X3RpdGFuX2dvZC5wbmciLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgaW1hZ2UgZmVhdHVyZXMgYSBsYXJnZSwgaHVtYW5vaWQgcm9ib3Qgb3IgbWVjaCB0b3dlcmluZyBvdmVyIGEgY2l0eXNjYXBlLiBUaGUgcm9ib3QgaXMgZGVwaWN0ZWQgaW4gYSBmdXR1cmlzdGljIGVudmlyb25tZW50LCBzdXJyb3VuZGVkIGJ5IHRhbGwgYnVpbGRpbmdzLiBUaGUgbWFpbiBvYmplY3QsIHRoZSByb2JvdCwgaXMgdmlzaWJsZSBpbiBmdWxsIGFuZCBjb21tYW5kcyBhIHNpZ25pZmljYW50IHByZXNlbmNlIGluIHRoZSBpbWFnZS4gVGhlIGNvbnRyYXN0IGJldHdlZW4gdGhlIG1hc3NpdmUgcm9ib3QgYW5kIHRoZSBtdWNoIHNtYWxsZXIgYnVpbGRpbmdzIGVtcGhhc2l6ZXMgaXRzIHNjYWxlLiIKICAgIH0sCiAgICB7CiAgICAgICAgImZpbGVuYW1lIjogImJydXRhbGlzdF90aXRhbl9nb2RfcmV2aXNlZC5wbmciLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgaW1hZ2UgZGVwaWN0cyBhIGxhcmdlLCByb2JvdGljIGZpZ3VyZSBvciBtZWNoIGluIGEgY2l0eXNjYXBlIGF0IGR1c2sgb3IgbmlnaHQsIHdpdGggYSBtb29keSBhdG1vc3BoZXJlIGZlYXR1cmluZyBibHVpc2ggYW5kIHBpbmsgbmVvbiBsaWdodHMuIFRoZSByb2JvdCBhcHBlYXJzIHRvIGJlIHRvd2VyaW5nIG92ZXIgYnVpbGRpbmdzIGluIHRoZSBmb3JlZ3JvdW5kLCBhbmQgaXQgaXMgc2hvd24gaW4gZnVsbC4gVGhlIHNjZW5lIGhhcyBhIGZ1dHVyaXN0aWMgb3Igc2NpLWZpIHRoZW1lLCB3aXRoIGEgbWlzdHkgYmFja2dyb3VuZCB0aGF0IGVuaGFuY2VzIHRoZSBkcmFtYXRpYyBlZmZlY3QuIgogICAgfQpdlHV1fZQoaAJoBUMKB+kEDAktCAsbpJSFlFKUaAl9lChoC4wJYXNzaXN0YW50lGgNWIYBAABJJ3ZlIGdlbmVyYXRlZCBhIGNvbmNlcHQgYXJ0IGltYWdlIGZvciB5b3UgYmFzZWQgb24geW91ciBwcm9tcHQsIGVtcGhhc2l6aW5nIGFuIGFuY2llbnQgNjAtbWV0ZXIgdGFsbCB0aXRhbiBnb2Qgd2l0aCBicnV0YWxpc20gYW5kIHJldHJvLWZ1dHVyZSBhZXN0aGV0aWNzLCBmZWF0dXJpbmcgYmxvY2t5LCBnZW9tZXRyaWMgc2hhcGVzIGFuZCBuZW9uIGhpZ2hsaWdodHMuIFR3byBmaWxlcyBoYXZlIGJlZW4gYWRkZWQgdG8geW91ciBzZXNzaW9uOgoK4oCiIGJydXRhbGlzdF90aXRhbl9nb2QucG5nICAK4oCiIGJydXRhbGlzdF90aXRhbl9nb2RfcmV2aXNlZC5wbmcKCkxldCBtZSBrbm93IGlmIHlvdSdkIGxpa2UgYW55IGFkanVzdG1lbnRzIG9yIGZ1cnRoZXIgbW9kaWZpY2F0aW9ucyGUdXV9lChoAmgFQwoH6QQMCS4UBbvilIWUUpRoCX2UKGgLaBxoDYx+aSBsaWtlIHRoZSBmaXJzdCBvbmUgYSBsb3QuLiBtYWtlIHZhcmlhdGlvbnMgb2YgdGhpcyBidXQgbWFrZSB0aGVtIGlzb2xhdGVkIGluIHRoZSBpbWFnZSBhbmQgY2VudGVyZWQuIG92ZXIgYSB3aGl0ZSBiYWNrZ3JvdW5klHV1fZQoaAJoBUMKB+kEDAkuGAs+WpSFlFKUaAl9lChoC4wJYXNzaXN0YW50lGgNTmgxXZRoNSmBlH2UKGg4fZQoaDqMHWNhbGxfTlJGdW5acFlLcng1Q2xBMlpwOXVHMG9KlGg8aD4pgZR9lChoOH2UKGhCWKABAAB7InByb21wdCI6ICJDcmVhdGUgdmFyaWF0aW9ucyBvZiB0aGUgcHJldmlvdXNseSBsaWtlZCBjb25jZXB0IGFydCAoYnJ1dGFsaXN0X3RpdGFuX2dvZC5wbmcpLCBmb2N1c2luZyBvbiBpc29sYXRpbmcgdGhlIGFuY2llbnQgNjAtbWV0ZXIgdGFsbCB0aXRhbiBnb2QuIFRoZSB0aXRhbiBzaG91bGQgYmUgY2VudGVyZWQgYW5kIGZ1bGx5IHZpc2libGUgd2l0aCBhIHBsYWluIHdoaXRlIGJhY2tncm91bmQuIEVtcGhhc2l6ZSB0aGUgYnJ1dGFsaXN0LCByZXRyby1mdXR1cmlzdGljIGFlc3RoZXRpY3Mgd2l0aCBibG9ja3ksIGdlb21ldHJpYyBzaGFwZXMgYW5kIG5lb24gZWRnZSBhY2NlbnRzLCBidXQgcmVtb3ZlIHRoZSB1cmJhbiBsYW5kc2NhcGUgZWxlbWVudHMgZm9yIGEgY2xlYW4sIHN0dWRpby1saWtlIHByZXNlbnRhdGlvbi4ifZRoRIwSaW52b2tlX2ltYWdlX2FnZW50lHVoRn2UaEiPlChoQmhEkGhKTnViaEtoPHVoRn2UaEiPlChoPGhLaDqQaEpOdWJhdXV9lChoAmgFQwoH6QQMCTAVDP+6lIWUUpRoCX2UKGgLaFNoVGhtaA1YNAsAAEFnZW50IHJlc3BvbnNlOiBJJ3ZlIGNyZWF0ZWQgdHdvIGlzb2xhdGVkIHZlcnNpb25zIG9mIHRoZSBicnV0YWxpc3QgdGl0YW4gZ29kIGZpZ3VyZSBhcyB5b3UgcmVxdWVzdGVkOgoKMS4gKipicnV0YWxpc3RfdGl0YW5faXNvbGF0ZWRfZGFsbGUucG5nKiogLSBUaGlzIHByZXNlbnRzIHRoZSB0aXRhbiB3aXRoIGEgY2xlYW5lciBiYWNrZ3JvdW5kLCBzaG93Y2FzaW5nIHRoZSBibG9ja3ksIGdlb21ldHJpYyBzaGFwZXMgYW5kIG1vZHVsYXIgY29uc3RydWN0aW9uIHlvdSB3YW50ZWQuIFRoZSBuZW9uIGFjY2VudHMgaGlnaGxpZ2h0IHRoZSBlZGdlcywgZ2l2aW5nIGl0IHRoYXQgcmV0cm8tZnV0dXJpc3RpYyBhZXN0aGV0aWMuCgoyLiAqKmJydXRhbGlzdF90aXRhbl9pc29sYXRlZF9kYWxsZV8yLnBuZyoqIC0gVGhpcyB2ZXJzaW9uIG9mZmVycyBhIHNsaWdodGx5IGRpZmZlcmVudCBpbnRlcnByZXRhdGlvbiB3aXRoIG1vcmUgZW1waGFzaXMgb24gdGhlIGNvbmNyZXRlLWxpa2UgdGV4dHVyZSBhbmQgYXJjaGl0ZWN0dXJhbCBxdWFsaXRpZXMuIFRoZSBmaWd1cmUgYXBwZWFycyBhcyBhIGhpZ2gtZW5kIHByb2R1Y3Qgc2hvdCB3aXRoIHN0dWRpbyBsaWdodGluZyB0aGF0IGVtcGhhc2l6ZXMgdGhlIGdlb21ldHJpYyBwYXR0ZXJucyBhbmQgc2hhcnAgYW5nbGVzLgoKQm90aCBpbWFnZXMgZm9jdXMgc29sZWx5IG9uIHRoZSB0aXRhbiBmaWd1cmUgd2l0aCBubyB1cmJhbiBsYW5kc2NhcGUgZWxlbWVudHMsIHByb3ZpZGluZyB0aGUgY2xlYW4sIHN0dWRpby1saWtlIHByZXNlbnRhdGlvbiB5b3UgcmVxdWVzdGVkLiBUaGUgYnJ1dGFsaXN0IGRlc2lnbiBhZXN0aGV0aWMgY29tZXMgdGhyb3VnaCBpbiB0aGUgYmxvY2t5IHNoYXBlcywgcmlnaWQgZ2VvbWV0cnksIGFuZCBhYnNlbmNlIG9mIG9yZ2FuaWMgZm9ybXMsIHdoaWxlIHRoZSBuZW9uIGVkZ2UgYWNjZW50cyBhZGQgdGhhdCByZXRyby1mdXR1cmlzdGljIHRvdWNoIHlvdSBzcGVjaWZpZWQuCgpXb3VsZCB5b3UgbGlrZSBhbnkgYWRqdXN0bWVudHMgdG8gZWl0aGVyIG9mIHRoZXNlIGlzb2xhdGVkIHRpdGFuIGNvbmNlcHRzPyAKCk5ld2x5IGFkZGVkIHNlc3Npb24gZmlsZXM6IFsKICAgIHsKICAgICAgICAiZmlsZW5hbWUiOiAiYnJ1dGFsaXN0X3RpdGFuX2lzb2xhdGVkLnBuZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBpbWFnZSBkZXBpY3RzIGEgbGFyZ2Ugcm9ib3RpYyBmaWd1cmUsIHJlc2VtYmxpbmcgYSBtZWNoIG9yIGdpYW50IHJvYm90LCBzZXQgYWdhaW5zdCBhIGZ1dHVyaXN0aWMgY2l0eXNjYXBlIHdpdGggdG93ZXJpbmcgYnVpbGRpbmdzLiBUaGUgcm9ib3QgZmVhdHVyZXMgYW5ndWxhciBkZXNpZ24gZWxlbWVudHMsIHByb21pbmVudCBtZXRhbGxpYyBjb2xvcnMsIGFuZCBnbG93aW5nIHJlZCBhY2NlbnRzLiBcblxuVGhlIG1haW4gb2JqZWN0ICh0aGUgcm9ib3QpIGFwcGVhcnMgdG8gYmUgdmlzaWJsZSBpbiBmdWxsLCByYXRoZXIgdGhhbiBjcm9wcGVkLiIKICAgIH0sCiAgICB7CiAgICAgICAgImZpbGVuYW1lIjogImJydXRhbGlzdF90aXRhbl9pc29sYXRlZF8yLnBuZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBpbWFnZSBzaG93cyBhIGxhcmdlIHJvYm90aWMgZmlndXJlIHN0YW5kaW5nIGluIGFuIHVyYmFuIGVudmlyb25tZW50IHdpdGggdGFsbCBidWlsZGluZ3MgaW4gdGhlIGJhY2tncm91bmQuIFRoZSByb2JvdCBhcHBlYXJzIHRvIGJlIGRlc2lnbmVkIHdpdGggYSBjb21iaW5hdGlvbiBvZiBtZXRhbGxpYyBhbmQgZnV0dXJpc3RpYyBmZWF0dXJlcywgaGlnaGxpZ2h0ZWQgd2l0aCBibHVlIGFuZCByZWQgYWNjZW50cy4gSXQgaXMgZGVwaWN0ZWQgaW4gZnVsbCB2aWV3LCBzdGFuZGluZyBwcm9taW5lbnRseSBpbiB0aGUgZm9yZWdyb3VuZC4iCiAgICB9LAogICAgewogICAgICAgICJmaWxlbmFtZSI6ICJicnV0YWxpc3RfdGl0YW5faXNvbGF0ZWRfZGFsbGUucG5nIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGltYWdlIGRlcGljdHMgYSBsYXJnZSwgaHVtYW5vaWQgZmlndXJlIG1hZGUgdXAgb2YgZ2VvbWV0cmljIHNoYXBlcyBhbmQgYmxvY2tzLCByZXNlbWJsaW5nIGEgcm9ib3Qgb3IgbWVjaGFuaWNhbCBjb25zdHJ1Y3QuIFRoZSBmaWd1cmUgaXMgZGV0YWlsZWQgd2l0aCB2YXJpb3VzIHRleHR1cmVzIGFuZCBjb2xvcmVkIGFjY2VudHMuIEl0IHN0YW5kcyBpbiBmcm9udCBvZiBhIHBsYWluIGJhY2tncm91bmQsIHdoaWNoIGhlbHBzIGhpZ2hsaWdodCBpdHMgZGVzaWduLiBUaGUgbWFpbiBvYmplY3QsIHRoZSByb2JvdCwgaXMgdmlzaWJsZSBpbiBmdWxsLCB3aXRoIG5vIGNyb3BwaW5nLiIKICAgIH0sCiAgICB7CiAgICAgICAgImZpbGVuYW1lIjogImJydXRhbGlzdF90aXRhbl9pc29sYXRlZF9kYWxsZV8yLnBuZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBpbWFnZSBkZXBpY3RzIGEgbGFyZ2UsIGFic3RyYWN0IHNjdWxwdHVyZSByZXNlbWJsaW5nIGEgaHVtYW5vaWQgZmlndXJlLiBUaGUgc2N1bHB0dXJlIGFwcGVhcnMgdG8gYmUgbWFkZSBmcm9tIGEgdGV4dHVyZWQgbWF0ZXJpYWwsIHBvc3NpYmx5IGNvbmNyZXRlIG9yIGEgc2ltaWxhciBzdWJzdGFuY2UsIGZlYXR1cmluZyB2YXJpb3VzIGdlb21ldHJpYyBzaGFwZXMgYW5kIHBhdHRlcm5zLiBJdCBpcyBpbGx1bWluYXRlZCB3aXRoIGJsdWUgYW5kIHJlZCBsaWdodHMgdGhhdCBoaWdobGlnaHQgY2VydGFpbiBwYXJ0cyBvZiB0aGUgc2N1bHB0dXJlLiBcblxuVGhlIG1haW4gb2JqZWN0LCB3aGljaCBpcyB0aGUgc2N1bHB0dXJlLCBpcyB2aXNpYmxlIGluIGZ1bGwgYW5kIGlzIGNlbnRlcmVkIGluIHRoZSBpbWFnZSwgd2l0aCBubyBjcm9wcGluZyBldmlkZW50LiIKICAgIH0KXZR1dX2UKGgCaAVDCgfpBAwJMBsI20WUhZRSlGgJfZQoaAuMCWFzc2lzdGFudJRoDVi9AQAASSd2ZSBjcmVhdGVkIHR3byB2YXJpYXRpb25zIG9mIHRoZSBpbml0aWFsIGNvbmNlcHQgYXJ0IGZvciB5b3VyIGFuY2llbnQgdGl0YW4gZ29kLiBCb3RoIHZhcmlhdGlvbnMgZm9jdXMgb24gaXNvbGF0aW5nIHRoZSBmaWd1cmUsIGNlbnRlcmluZyBpdCwgYW5kIHBsYWNpbmcgaXQgYWdhaW5zdCBhIGNsZWFuIHdoaXRlIGJhY2tncm91bmQ6CgrigKIgYnJ1dGFsaXN0X3RpdGFuX2lzb2xhdGVkX2RhbGxlLnBuZyAgCuKAoiBicnV0YWxpc3RfdGl0YW5faXNvbGF0ZWRfZGFsbGVfMi5wbmcKClRoZXNlIGltYWdlcyBub3cgc2hvd2Nhc2UgdGhlIHRpdGFuIGluIGEgc3R1ZGlvLWxpa2UgcHJlc2VudGF0aW9uIHdpdGhvdXQgYW55IHVyYmFuIGxhbmRzY2FwZSBlbGVtZW50cy4gTGV0IG1lIGtub3cgaWYgeW91J2QgbGlrZSBhbnkgbW9yZSB0d2Vha3Mgb3IgZnVydGhlciB2YXJpYXRpb25zIZR1dX2UKIwJdGltZXN0YW1wlGgFQwoH6QQMCgkBBs3alIWUUpSMBGRhdGGUfZQojARyb2xllIwEdXNlcpSMB2NvbnRlbnSUjFRtYWtlIGEgM2QgbW9kZWwgb2YgdGhpcyBpbWFnZQoKRmlsZXMgZm9yIHJlZmVyZW5jZTogW2JydXRhbGlzdF90aXRhbl9pc29sYXRlZF8yLnBuZ12UdXV9lChohWgFQwoH6QQMCgkJDayglIWUUpRoiX2UKGiLjAlhc3Npc3RhbnSUaI2MpkknbGwgZ2VuZXJhdGUgYSAzRCBtb2RlbCBmcm9tIHRoZSBpbWFnZSAiYnJ1dGFsaXN0X3RpdGFuX2lzb2xhdGVkXzIucG5nIiB1c2luZyBvdXIgaW1hZ2UtdG8tM0QgdG9vbC4gVGhpcyBwcm9jZXNzIHR5cGljYWxseSB0YWtlcyAxLTIgbWludXRlcy4gRG8geW91IHdhbnQgdG8gcHJvY2VlZD+UdXV9lChohWgFQwoH6QQMCgozBYOflIWUUpRoiX2UKGiLaIxojYwDeWVzlHV1fZQoaIVoBUMKB+kEDAoKNQy3U5SFlFKUaIl9lChoi4wJYXNzaXN0YW50lGiNTowKdG9vbF9jYWxsc5RdlGg1KYGUfZQoaDh9lCiMAmlklIwdY2FsbF9WWGNMZGtNUWlrNnJzeXFCT3hxZ3llTWuUjAhmdW5jdGlvbpRoPimBlH2UKGg4fZQojAlhcmd1bWVudHOUjDR7ImltYWdlX2ZpbGVuYW1lIjogImJydXRhbGlzdF90aXRhbl9pc29sYXRlZF8yLnBuZyJ9lIwEbmFtZZSMC2ltYWdlX3RvXzNklHVoRn2UaEiPlChorWivkGhKTnVijAR0eXBllGipdWhGfZRoSI+UKGipaLNop5BoSk51YmF1dX2UKGiFaAVDCgfpBAwKDCUCDGCUhZRSlGiJfZQoaIuMBHRvb2yUjAx0b29sX2NhbGxfaWSUaKhojVi6AgAAM0QgZ2VuZXJhdGlvbiBzdWNjZWVkZWQuIE5ld2x5IGFkZGVkIGZpbGVzOiBbCiAgICB7CiAgICAgICAgImZpbGVuYW1lIjogImJydXRhbGlzdF90aXRhbl9pc29sYXRlZF8yXzJkX3ByZXZpZXcucG5nIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGltYWdlIHNob3dzIGEgc3R5bGl6ZWQsIGh1bWFub2lkIHJvYm90IG9yIGNoYXJhY3RlciBmaWd1cmUgd2l0aCBhIG1ldGFsbGljIGJsdWUgYW5kIHNpbHZlciBhcHBlYXJhbmNlLCBmZWF0dXJpbmcgcmVkIGFjY2VudHMuIFRoZSBmaWd1cmUgaXMgZGVzaWduZWQgd2l0aCBhbmd1bGFyIGFybW9yLWxpa2Ugc2hhcGVzIGFuZCBpcyBwb3NlZCBpbiBhIGNyb3VjaGluZyBvciBhZHZhbmNpbmcgc3RhbmNlLiBUaGUgbWFpbiBvYmplY3QgaXMgdmlzaWJsZSBpbiBmdWxsIGFuZCBpcyBub3QgY3JvcHBlZC4iCiAgICB9LAogICAgewogICAgICAgICJmaWxlbmFtZSI6ICJicnV0YWxpc3RfdGl0YW5faXNvbGF0ZWRfMi5nbGIiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJBSS1nZW5lcmF0ZWQgM0QgcmVjb25zdHJ1Y3Rpb24gb2YgYnJ1dGFsaXN0X3RpdGFuX2lzb2xhdGVkXzIucG5nOiBBIDNEIG1lc2guIEZvciBkZXNjcmlwdGlvbiwgc2VlIHJlbmRlcmVkIGltYWdlIGRlc2NyaXB0aW9uOiBicnV0YWxpc3RfdGl0YW5faXNvbGF0ZWRfMl8yZF9wcmV2aWV3LnBuZy4iCiAgICB9Cl2UdXV9lChohWgFQwoH6QQMCgwnBvjYlIWUUpRoiX2UKGiLjAlhc3Npc3RhbnSUaI1YSQEAAFRoZSAzRCBtb2RlbCBoYXMgYmVlbiBnZW5lcmF0ZWQgZnJvbSAiYnJ1dGFsaXN0X3RpdGFuX2lzb2xhdGVkXzIucG5nIi4gVHdvIG5ldyBmaWxlcyBoYXZlIGJlZW4gYWRkZWQgdG8geW91ciBzZXNzaW9uOgoK4oCiIGJydXRhbGlzdF90aXRhbl9pc29sYXRlZF8yLmdsYiAodGhlIDNEIG1lc2gpICAK4oCiIGJydXRhbGlzdF90aXRhbl9pc29sYXRlZF8yXzJkX3ByZXZpZXcucG5nIChhIHJlbmRlcmVkIHByZXZpZXcgb2YgdGhlIDNEIG1vZGVsKQoKTGV0IG1lIGtub3cgaWYgeW91J2QgbGlrZSBhbnkgZnVydGhlciBhZGp1c3RtZW50cyBvciBhZGRpdGlvbmFsIHByb2Nlc3NpbmchlHV1fZQoaIVoBUMKB+kEDAoULwoA1JSFlFKUaIl9lChoi2iMaI2Mzm1ha2UgYW4gYXJ0IGNvcmUgcmVzdHlsZSBtb2RpZmljYXRpb24gYXMgaWYgaXQgd2VyZSB3b3JuIG91dCBhbmQgYWJhbmRvbmVkLCBhIGxpdHRsZSBkZXN0cm95ZWQsIGEgbG90IG9mIHRpbWUgaGFzIHBhc3NlZCBhbmQgc2lnbnMgb2YgZGVjYXkgYXJlIGV2aWRlbnQKCkZpbGVzIGZvciByZWZlcmVuY2U6IFticnV0YWxpc3RfdGl0YW5faXNvbGF0ZWRfMi5nbGJdlHV1fZQoaIVoBUMKB+kEDAoUOQxBAZSFlFKUaIl9lChoi4wJYXNzaXN0YW50lGiNWAkDAABJJ2xsIG5vdyBzY2hlZHVsZSBhbiBBUlQgQ29yZSByZXN0eWxlIG1vZGlmaWNhdGlvbiBmb3IgeW91ciAzRCBhc3NldCB0byBnaXZlIGl0IGEgd29ybi1vdXQgYW5kIGFiYW5kb25lZCBsb29rIHdpdGggc2lnbnMgb2YgZGVjYXkuIEhlcmUncyB3aGF0IEknbSBwbGFubmluZzoKCuKAoiBJbnB1dCBNZXNoOiBicnV0YWxpc3RfdGl0YW5faXNvbGF0ZWRfMi5nbGIgIArigKIgTW9kZTogc3R5bGl6ZSAgCuKAoiBHZW5lcmF0ZSBEaXNwbGFjZW1lbnQgYW5kIEhpZ2ggUG9seTogRmFsc2UgIArigKIgUmVzb2x1dGlvbjogNGsgIArigKIgUG9zaXRpdmUgcHJvbXB0OiAid29ybiBvdXQsIGFiYW5kb25lZCwgdGltZS13b3JuLCBkZWNheWVkLCBjcnVtYmxpbmcsIHdlYXRoZXJlZCwgc2lnbnMgb2YgZGVjYXkiICAK4oCiIE5lZ2F0aXZlIHByb21wdDogIm5ldywgcHJpc3RpbmUsIG1vZGVybiwgdW5kYW1hZ2VkIiAgCuKAoiBFeGlzdGluZyBUZXh0dXJlIFByZXNlcnZhdGlvbjogMC4yICh0byBhbGxvdyBhIHN0cm9uZyByZXN0eWxpbmcgdG93YXJkcyBkZWNheSkgIArigKIgVW5zaGFkZSBTdHJlbmd0aDogMC4zICAK4oCiIFByZXNlcnZlIEV4aXN0aW5nIFVWczogRmFsc2UKClRoZXNlIHNldHRpbmdzIHNob3VsZCByZXRleHR1cmUgeW91ciBtb2RlbCB0byByZWZsZWN0IHRoZSBwYXNzYWdlIG9mIHRpbWUsIGRlY2F5LCBhbmQgYWJhbmRvbm1lbnQuIERvIHRoZXNlIHBhcmFtZXRlcnMgbG9vayBnb29kIHRvIHlvdT8gUGxlYXNlIGNvbmZpcm0gaWYgSSBzaG91bGQgcHJvY2VlZC6UdXV9lChohWgFQwoH6QQMChYUBIOulIWUUpRoiX2UKGiLaIxojYwLeWVzIHByb2NlZWSUdXV9lChohWgFQwoH6QQMChYXAxnKlIWUUpRoiX2UKGiLjAlhc3Npc3RhbnSUaI1OaKJdlGg1KYGUfZQoaDh9lChop4wdY2FsbF9VOUxjS05RQnMwSDRoSjFEdWZSN0xUamaUaKloPimBlH2UKGg4fZQoaK1YiAEAAHsiaW5wdXRfbWVzaF9maWxlbmFtZSI6ICJicnV0YWxpc3RfdGl0YW5faXNvbGF0ZWRfMi5nbGIiLCAibW9kZSI6ICJzdHlsaXplIiwgImdlbmVyYXRlX2Rpc3BsYWNlbWVudF9hbmRfaGlnaF9wb2x5IjogZmFsc2UsICJyZXNvbHV0aW9uIjogIjRrIiwgInBvc2l0aXZlX3Byb21wdCI6ICJ3b3JuIG91dCwgYWJhbmRvbmVkLCB0aW1lLXdvcm4sIGRlY2F5ZWQsIGNydW1ibGluZywgd2VhdGhlcmVkLCBzaWducyBvZiBkZWNheSIsICJuZWdhdGl2ZV9wcm9tcHQiOiAibmV3LCBwcmlzdGluZSwgbW9kZXJuLCB1bmRhbWFnZWQiLCAiZXhpc3RpbmdfdGV4dHVyZV9wcmVzZXJ2YXRpb24iOiAwLjIsICJ1bnNoYWRlX3N0cmVuZ3RoIjogMC4zLCAicHJlc2VydmVfZXhpc3RpbmdfdXZzIjogZmFsc2V9lGivjBVzY2hlZHVsZV9hcnRfY29yZV9qb2KUdWhGfZRoSI+UKGitaK+QaEpOdWJos2ipdWhGfZRoSI+UKGipaLNop5BoSk51YmF1dX2UKGiFaAVDCgfpBAwKFhgDZJOUhZRSlGiJfZQoaItou2i8aOJojYx3U2NoZWR1bGUgc3VjY2VlZGVkIHdpdGggam9iX2lkPSc2NTkwYWU1Ni0zMWEyLTQxZDYtOTZlOC0wMjI1ZDU0MDM1ZDgnLiBZb3Ugd2lsbCBiZSBwcm9tcHRlZCBieSBzeXN0ZW0gb25jZSBpdCBmaW5pc2hlcy6UdXV9lChohWgFQwoH6QQMChYaDupVlIWUUpRoiX2UKGiLjAlhc3Npc3RhbnSUaI2MyVRoZSBBUlQgQ29yZSBqb2IgaGFzIGJlZW4gc2NoZWR1bGVkIHdpdGggam9iX2lkICc2NTkwYWU1Ni0zMWEyLTQxZDYtOTZlOC0wMjI1ZDU0MDM1ZDgnLiBJJ2xsIGtlZXAgeW91IHVwZGF0ZWQgb25jZSB0aGUgcmVzdHlsaW5nIHByb2Nlc3MgZmluaXNoZXMuIExldCBtZSBrbm93IGlmIHlvdSBuZWVkIGFueXRoaW5nIGVsc2UgaW4gdGhlIG1lYW50aW1lIZR1dX2UKGiFaAVDCgfpBAwKIDUGT2KUhZRSlGiJfZQoaIuMBnN5c3RlbZRojVhCBAAASm9iIGpvYl9pZD0nNjU5MGFlNTYtMzFhMi00MWQ2LTk2ZTgtMDIyNWQ1NDAzNWQ4JyBmaW5pc2hlZC4gTmV3IGZpbGVzOiBbCiAgICB7CiAgICAgICAgImZpbGVuYW1lIjogImJydXRhbGlzdF90aXRhbl9pc29sYXRlZF8yXzJkX3ByZXZpZXdfNjU5MGFlNTYucG5nIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW50ZXJtZWRpYXRlIG11bHRpLXZpZXcgaW1hZ2UgdXNlZCB0byBjcmVhdGUgYnJ1dGFsaXN0X3RpdGFuX2lzb2xhdGVkXzJfcHJvY2Vzc2VkXzY1OTBhZTU2LmdsYi4gVGhlIGltYWdlIGZlYXR1cmVzIGEgc2VyaWVzIG9mIGZvdXIgYWJzdHJhY3QgZmlndXJlcyBtYWRlIHVwIG9mIGlycmVndWxhciwgZnJhZ21lbnRlZCBwaWVjZXMsIHJlc2VtYmxpbmcgYnJva2VuIHBsYXN0ZXIgb3IgdGlsZXMuIEVhY2ggZmlndXJlIGFwcGVhcnMgdG8gbWltaWMgYSBodW1hbm9pZCBmb3JtLCB3aXRoIHJvdWdoIG91dGxpbmVzIHN1Z2dlc3RpbmcgbGltYnMgYW5kIGEgdG9yc28sIGJ1dCB0aGVyZSBhcmUgbm8gZGlzY2VybmlibGUgZGV0YWlscyBvciBmYWNpYWwgZmVhdHVyZXMuIFRoZSBmaWd1cmVzIGFyZSBzZXQgYWdhaW5zdCBhIGRhcmsgYmFja2dyb3VuZCwgZW5oYW5jaW5nIHRoZWlyIHN0YXJrIHByZXNlbnRhdGlvbi4gQWxsIGZpZ3VyZXMgc2VlbSB0byBiZSBmdWxseSB2aXNpYmxlLCB3aXRob3V0IGFueSBjcm9wcGluZy4iCiAgICB9LAogICAgewogICAgICAgICJmaWxlbmFtZSI6ICJicnV0YWxpc3RfdGl0YW5faXNvbGF0ZWRfMl9wcm9jZXNzZWRfNjU5MGFlNTYuYmxlbmQiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTYW1lIGFzIGJydXRhbGlzdF90aXRhbl9pc29sYXRlZF8yX3Byb2Nlc3NlZF82NTkwYWU1Ni5nbGIsIGJ1dCBhIHJhdyAuYmxlbmQgZmlsZSBiZWZvcmUgLmdsYiBleHBvcnQuIgogICAgfSwKICAgIHsKICAgICAgICAiZmlsZW5hbWUiOiAiYnJ1dGFsaXN0X3RpdGFuX2lzb2xhdGVkXzJfcHJvY2Vzc2VkXzY1OTBhZTU2LmdsYiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkVycm9yIGdlbmVyYXRpbmcgZGVzY3JpcHRpb246IEhUVFAgRXJyb3IgNDAwOiBCYWQgUmVxdWVzdCIKICAgIH0KXZR1dX2UKGiFaAVDCgfpBAwKIDkLbLGUhZRSlGiJfZQoaIuMCWFzc2lzdGFudJRojVilAgAAVGhlIEFSVCBDb3JlIGpvYiBpcyBjb21wbGV0ZSEgSGVyZSBhcmUgdGhlIG5ldyBmaWxlcyBhZGRlZCB0byB5b3VyIHNlc3Npb246CgrigKIgYnJ1dGFsaXN0X3RpdGFuX2lzb2xhdGVkXzJfMmRfcHJldmlld182NTkwYWU1Ni5wbmcg4oCTIEFuIGludGVybWVkaWF0ZSBtdWx0aS12aWV3IGltYWdlIHVzZWQgZHVyaW5nIHByb2Nlc3NpbmcuICAK4oCiIGJydXRhbGlzdF90aXRhbl9pc29sYXRlZF8yX3Byb2Nlc3NlZF82NTkwYWU1Ni5ibGVuZCDigJMgVGhlIHJhdyBCbGVuZGVyIGZpbGUgZnJvbSB3aGljaCB0aGUgZmluYWwgM0QgYXNzZXQgd2FzIGV4cG9ydGVkLiAgCuKAoiBicnV0YWxpc3RfdGl0YW5faXNvbGF0ZWRfMl9wcm9jZXNzZWRfNjU5MGFlNTYuZ2xiIOKAkyBUaGUgZmluYWwgcHJvY2Vzc2VkIDNEIG1vZGVsLiAoTm90ZTogVGhlcmUgd2FzIGFuIGVycm9yIGdlbmVyYXRpbmcgaXRzIGRlc2NyaXB0aW9uLCBidXQgdGhlIGZpbGUgaXMgYXZhaWxhYmxlLikKCllvdSBjYW4gbm93IHJldmlldyB0aGUgcHJvY2Vzc2VkIDNEIG1vZGVsIHdpdGggaXRzIHdvcm4tb3V0LCBhYmFuZG9uZWQgbG9vaywgY29udmV5aW5nIGRlY2F5IGFuZCB3ZWF0aGVyaW5nLiBMZXQgbWUga25vdyBpZiB5b3UgbmVlZCBhbnkgZnVydGhlciBtb2RpZmljYXRpb25zIG9yIGFkZGl0aW9uYWwgcHJvY2Vzc2luZyGUdXVlLg==\"\n}",
    "image_agent": "{\n    \"version\": \"0.1.1\",\n    \"api\": \"anthropic\",\n    \"model\": \"claude-3-7-sonnet-20250219\",\n    \"is_reasoner\": false,\n    \"tool_calling\": true,\n    \"messages\": \"\"\n}",
    "job_slots": {
        "2d": -1,
        "3d": -1,
        "art": -1,
        "pbr": -1
    },
    "before_first_user_input": false,
    "archived_agents": []
}